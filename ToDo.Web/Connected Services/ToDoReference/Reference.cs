//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ToDo.Web.ToDoReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tasks", Namespace="http://schemas.datacontract.org/2004/07/ToDo.Service")]
    [System.SerializableAttribute()]
    public partial class Tasks : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string titleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ToDoReference.ITodoService")]
    public interface ITodoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetTasks", ReplyAction="http://tempuri.org/ITodoService/GetTasksResponse")]
        ToDo.Web.ToDoReference.Tasks[] GetTasks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetTasks", ReplyAction="http://tempuri.org/ITodoService/GetTasksResponse")]
        System.Threading.Tasks.Task<ToDo.Web.ToDoReference.Tasks[]> GetTasksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetTaskById", ReplyAction="http://tempuri.org/ITodoService/GetTaskByIdResponse")]
        ToDo.Web.ToDoReference.Tasks GetTaskById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetTaskById", ReplyAction="http://tempuri.org/ITodoService/GetTaskByIdResponse")]
        System.Threading.Tasks.Task<ToDo.Web.ToDoReference.Tasks> GetTaskByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/AddTask", ReplyAction="http://tempuri.org/ITodoService/AddTaskResponse")]
        int AddTask(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/AddTask", ReplyAction="http://tempuri.org/ITodoService/AddTaskResponse")]
        System.Threading.Tasks.Task<int> AddTaskAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/UpdateTask", ReplyAction="http://tempuri.org/ITodoService/UpdateTaskResponse")]
        int UpdateTask(int id, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/UpdateTask", ReplyAction="http://tempuri.org/ITodoService/UpdateTaskResponse")]
        System.Threading.Tasks.Task<int> UpdateTaskAsync(int id, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/DeleteTaskById", ReplyAction="http://tempuri.org/ITodoService/DeleteTaskByIdResponse")]
        int DeleteTaskById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/DeleteTaskById", ReplyAction="http://tempuri.org/ITodoService/DeleteTaskByIdResponse")]
        System.Threading.Tasks.Task<int> DeleteTaskByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITodoServiceChannel : ToDo.Web.ToDoReference.ITodoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TodoServiceClient : System.ServiceModel.ClientBase<ToDo.Web.ToDoReference.ITodoService>, ToDo.Web.ToDoReference.ITodoService {
        
        public TodoServiceClient() {
        }
        
        public TodoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TodoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TodoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TodoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ToDo.Web.ToDoReference.Tasks[] GetTasks() {
            return base.Channel.GetTasks();
        }
        
        public System.Threading.Tasks.Task<ToDo.Web.ToDoReference.Tasks[]> GetTasksAsync() {
            return base.Channel.GetTasksAsync();
        }
        
        public ToDo.Web.ToDoReference.Tasks GetTaskById(int id) {
            return base.Channel.GetTaskById(id);
        }
        
        public System.Threading.Tasks.Task<ToDo.Web.ToDoReference.Tasks> GetTaskByIdAsync(int id) {
            return base.Channel.GetTaskByIdAsync(id);
        }
        
        public int AddTask(string title) {
            return base.Channel.AddTask(title);
        }
        
        public System.Threading.Tasks.Task<int> AddTaskAsync(string title) {
            return base.Channel.AddTaskAsync(title);
        }
        
        public int UpdateTask(int id, string title) {
            return base.Channel.UpdateTask(id, title);
        }
        
        public System.Threading.Tasks.Task<int> UpdateTaskAsync(int id, string title) {
            return base.Channel.UpdateTaskAsync(id, title);
        }
        
        public int DeleteTaskById(int id) {
            return base.Channel.DeleteTaskById(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteTaskByIdAsync(int id) {
            return base.Channel.DeleteTaskByIdAsync(id);
        }
    }
}
